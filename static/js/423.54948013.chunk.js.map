{"version":3,"file":"static/js/423.54948013.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAkB,mCAAG,qGACTD,EAAAA,EAAAA,GACrB,+EAF8B,cAC1BE,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,qDAOlBC,EAAe,mCAAG,WAAMC,GAAN,wFACNL,EAAAA,EAAAA,GAAM,UAAD,OAChBK,EADgB,6DADC,cACvBH,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfG,EAAa,mCAAG,WAAMD,GAAN,wFACJL,EAAAA,EAAAA,GAAM,UAAD,OAChBK,EADgB,qEADD,cACrBH,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,sDAObI,EAAgB,mCAAG,WAAMF,GAAN,wFACPL,EAAAA,EAAAA,GAAM,UAAD,OAChBK,EADgB,qEADE,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBK,EAAmB,mCAAG,WAAMC,GAAN,wFACVT,EAAAA,EAAAA,GAAM,uBAAD,OACHS,EADG,wFADK,cAC3BP,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,qD,+ICmBhC,EA9Ca,WACX,OAAgCO,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGAEhBJ,EAAS,IAFO,UAGGR,EAAAA,EAAAA,IAAcS,GAHjB,OAGVZ,EAHU,OAIhBS,EAAYT,EAAKgB,MAJD,gDAMhBL,EAAS,KAAMM,SACfC,QAAQC,IAAI,KAAMF,SAPF,yDAAH,qDAUjBF,GACD,GAAE,CAACH,KAGF,2BACGF,IAAS,mEACTF,IACEA,EAASY,OAAS,GACjB,yBACGZ,EAASa,KAAI,YAA4C,IAAzCnB,EAAwC,EAAxCA,GAAIoB,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC9BC,EAAMD,EAAY,yCACcA,G,8iQAEtC,OACE,2BACE,gBAAKE,IAAKD,EAAKE,IAAKL,EAAMM,MAAM,QAChC,wBAAKN,KACL,4CAAkBC,OAHXrB,EAMZ,OAGH,kFAIT,C","sources":["api/movies.js","components/Cast/index.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchPopularMovies = async () => {\n  const response = await axios(\n    '/trending/movie/day?language=en-US&api_key=492f31ee414458c3f1e9e8619db62132'\n  );\n  return response.data;\n};\n\nexport const fetchMoviesById = async id => {\n  const response = await axios(\n    `/movie/${id}?language=en-US&api_key=492f31ee414458c3f1e9e8619db62132`\n  );\n  return response.data;\n};\n\nexport const fetchCastById = async id => {\n  const response = await axios(\n    `/movie/${id}/credits?language=en-US&api_key=492f31ee414458c3f1e9e8619db62132`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsById = async id => {\n  const response = await axios(\n    `/movie/${id}/reviews?language=en-US&api_key=492f31ee414458c3f1e9e8619db62132`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesBySearch = async searchQuery => {\n  const response = await axios(\n    `/search/movie?query=${searchQuery}&include_adult=false&page=1&language=en-US&api_key=492f31ee414458c3f1e9e8619db62132`\n  );\n  return response.data;\n};\n","import { fetchCastById } from 'api/movies';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport defaultImg from 'img/not_found.jpg';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState(null);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCastById = async () => {\n      try {\n        setError('');\n        const data = await fetchCastById(movieId);\n        setCastInfo(data.cast);\n      } catch (error) {\n        setError(error.message);\n        console.log(error.message);\n      }\n    };\n    getCastById();\n  }, [movieId]);\n\n  return (\n    <div>\n      {error && <p>Sorry, something went wrong, try again.</p>}\n      {castInfo &&\n        (castInfo.length > 0 ? (\n          <div>\n            {castInfo.map(({ id, name, character, profile_path }) => {\n              const img = profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : defaultImg;\n              return (\n                <li key={id}>\n                  <img src={img} alt={name} width=\"75\" />\n                  <h3>{name}</h3>\n                  <p>{`Character: ${character}`}</p>\n                </li>\n              );\n            })}\n          </div>\n        ) : (\n          <p>We don't have information about cast of this movie.</p>\n        ))}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","fetchPopularMovies","response","data","fetchMoviesById","id","fetchCastById","fetchReviewsById","fetchMoviesBySearch","searchQuery","useState","castInfo","setCastInfo","error","setError","movieId","useParams","useEffect","getCastById","cast","message","console","log","length","map","name","character","profile_path","img","src","alt","width"],"sourceRoot":""}